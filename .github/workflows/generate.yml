name: Генерация артефактов из Protobuf

on:
  push:
    branches: [ "master" ]
    paths:
    - "auth.proto"

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

    - name: Выгрузка кода
      uses: actions/checkout@v2

    - name: Настройка Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.23.3'

    - name: Установка компилятора Protobuf
      run: |
        PB_REL="https://github.com/protocolbuffers/protobuf/releases"
        curl -LO $PB_REL/download/v25.1/protoc-25.1-linux-x86_64.zip
        unzip protoc-25.1-linux-x86_64.zip -d $HOME/.local
        rm protoc-25.1-linux-x86_64.zip
        export PATH="$PATH:$HOME/.local/bin"
        echo 'export PATH="$PATH:$HOME/.local/bin"' >> ~/.bashrc
        source ~/.bashrc

    - name: Проверка версии protoc
      run: protoc --version

    - name: Удаление кэшированных версий protoc-gen-go и protoc-gen-go-grpc
      run: |
        go clean -i google.golang.org/protobuf/cmd/protoc-gen-go
        go clean -i google.golang.org/grpc/cmd/protoc-gen-go-grpc

    - name: Установка protoc-gen-go
      run: go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

    - name: Установка protoc-gen-go-grpc
      run: go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Проверка версии protoc-gen-go
      run: protoc-gen-go --version

    - name: Проверка версии protoc-gen-go-grpc
      run: protoc-gen-go-grpc --version
      
    - name: Генерация Go-кода
      run: |
       mkdir -p proto
       protoc --go_out=. --go-grpc_out=. auth.proto

    - name: Проверка содержимого директории proto
      run: ls -la proto

    - name: Checkout Go module repository
      uses: actions/checkout@v2
      with:
        repository: sandrinasava/go-proto-module
        token: ${{ secrets.PROTO_TOKEN }}
        path: go-proto-module
        ref: main 

    - name: Очистка неотслеживаемых файлов
      run: |
        cd go-proto-module
        git clean -fd  # Удаляем неотслеживаемые файлы
        git reset --hard  # Сбрасываем изменения

    - name: Проверка и добавление файлов в репозиторий
      run: |
        cd go-proto-module
        if [ ! -f auth.pb.go ] || [ ! -f auth_grpc.pb.go ]; then
          echo "Файлы auth.pb.go и/или auth_grpc.pb.go не найдены. Создаем пустые файлы."
          touch auth.pb.go auth_grpc.pb.go
          git add auth.pb.go auth_grpc.pb.go
          git commit -m "Add initial versions of auth.pb.go and auth_grpc.pb.go"
          git push origin main  # Используйте правильное имя основной ветки
        fi

    - name: Проверка наличия файлов в go-proto-module
      run: |
        cd go-proto-module
        ls -la

    - name: Copy generated files
      run: |
        if [ -f proto/auth.pb.go ]; then
          cp proto/auth.pb.go go-proto-module/
        else
          echo "File auth.pb.go not found in proto directory!"
          exit 1
        fi

        if [ -f proto/auth_grpc.pb.go ]; then
          cp proto/auth_grpc.pb.go go-proto-module/
        else
          echo "File auth_grpc.pb.go not found in proto directory!"
          exit 1
        fi

    - name: Проверка наличия скопированных файлов в go-proto-module
      run: |
        cd go-proto-module
        ls -la

    - name: Commit and push changes
      run: |
        cd go-proto-module
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git fetch origin
        git checkout update-protobuf-files || git checkout -b update-protobuf-files
        git pull --rebase origin update-protobuf-files || true  # Игнорируем ошибки при первом выполнении
        rm -f auth.pb.go auth_grpc.pb.go
        cp ../proto/auth.pb.go .
        cp ../proto/auth_grpc.pb.go .
        git add auth.pb.go auth_grpc.pb.go
        git status  # Проверяем статус
        git commit -m "Update generated protobuf files" || true  # Делаем коммит, если есть изменения
        git push origin update-protobuf-files
